<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <LangVersion>latest</LangVersion>
    <IncludeBuildOutput>true</IncludeBuildOutput>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
    
    <!-- Package Information -->
    <PackageId>Structura</PackageId>
    <PackageVersion>1.0.0</PackageVersion>
    <Title>Structura - Fluent API Source Generator Type Manipulation Library</Title>
    <Description>A powerful .NET library that converts anonymous types and EF Core projections to strongly-typed types using source generators. Features include property addition/exclusion/type conversion, smart converters, and support for Records, Classes, and Structs with comprehensive testing coverage.</Description>
    <Summary>Fluent API-based source generator for anonymous type manipulation with smart converters for .NET</Summary>
    <Authors>dimohy</Authors>
    <Company>dimohy</Company>
    <Product>Structura</Product>
    <Copyright>Copyright (c) 2024 dimohy</Copyright>
    
    <!-- Package Metadata -->
    <PackageProjectUrl>https://github.com/dimohy/structura</PackageProjectUrl>
    <RepositoryUrl>https://github.com/dimohy/structura</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>source-generator;fluent-api;anonymous-types;ef-core-projection;type-manipulation;code-generation;csharp;dotnet;converter;record;class;struct</PackageTags>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageIcon>logo_nuget.png</PackageIcon>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageReleaseNotes>
      Version 1.0.0 Release Notes:
      
      🎉 Stable Release - Production Ready:
      - Focused on proven, reliable functionality
      - Comprehensive test coverage (150+ tests)
      - Enhanced stability and predictability
      
      🚀 Core Features:
      - Anonymous type combination with .With()
      - EF Core projection support with .WithProjection()
      - Property manipulation: Add(), Exclude(), ChangeType()
      - Smart converter methods with .WithConverter()
      - Multiple type generation: Records, Classes, Structs
      
      ✨ Smart Converter Features:
      - FromCollection() for anonymous object collections
      - FromTypedCollection() for strongly-typed collections
      - FromSingle() for individual anonymous objects
      - FromTyped() for individual strongly-typed objects
      - Automatic type conversion and null handling
      
      🔧 Property Manipulation:
      - Add new properties with custom types
      - Exclude sensitive or unwanted properties
      - Change property types (e.g., decimal to string)
      - Namespace customization support
      
      🧪 Testing &amp; Quality:
      - 150+ comprehensive unit tests
      - Property generation verification
      - Converter functionality validation
      - Integration tests for complex scenarios
      - Real-world usage pattern testing
      
      📋 API Examples:
      TypeCombiner.Combine()
        .WithProjection(efCoreResult)
        .Add("ProcessedAt", typeof(DateTime))
        .Exclude("Password")
        .ChangeType("Amount", typeof(string))
        .WithName("OrderDto")
        .WithConverter()
        .AsRecord()
        .Generate();
      
      // Usage:
      List&lt;Generated.OrderDto&gt; orders = OrderDto.FromCollection(efCoreResult);
      
      For documentation and examples, visit: https://github.com/dimohy/structura
    </PackageReleaseNotes>
    
    <!-- Package Configuration -->
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="bin\**" />
    <EmbeddedResource Remove="bin\**" />
    <None Remove="bin\**" />
  </ItemGroup>

  <!-- Package Files -->
  <ItemGroup>
    <None Include="..\README.md" Pack="true" PackagePath="\" />
    <None Include="..\LICENSE" Pack="true" PackagePath="\" />
    <None Include="..\logo_nuget.png" Pack="true" PackagePath="\" />
  </ItemGroup>

  <!-- Dependencies -->
  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.5.0" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4" PrivateAssets="all" />
  </ItemGroup>
  
  <ItemGroup>
    <None Remove="bin\Debug\netstandard2.0\\Structura.dll" />
  </ItemGroup>

  <!-- Include source generator in analyzers folder -->
  <ItemGroup>
    <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers\dotnet\cs\$(AssemblyName).dll" Visible="false" />
  </ItemGroup>

</Project>
